# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Restaurant {
  id: ID!
  name: String
  slug: String
  menus(
    where: MenuWhereInput! = {}
    orderBy: [MenuOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Menu!]
  menusCount(where: MenuWhereInput! = {}): Int
  image: CloudinaryImage_File
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
   Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input RestaurantWhereUniqueInput {
  id: ID
  slug: String
}

input RestaurantWhereInput {
  AND: [RestaurantWhereInput!]
  OR: [RestaurantWhereInput!]
  NOT: [RestaurantWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  menus: MenuManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input MenuManyRelationFilter {
  every: MenuWhereInput
  some: MenuWhereInput
  none: MenuWhereInput
}

input RestaurantOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input RestaurantUpdateInput {
  name: String
  slug: String
  menus: MenuRelateToManyForUpdateInput
  image: Upload
}

input MenuRelateToManyForUpdateInput {
  disconnect: [MenuWhereUniqueInput!]
  set: [MenuWhereUniqueInput!]
  create: [MenuCreateInput!]
  connect: [MenuWhereUniqueInput!]
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input RestaurantUpdateArgs {
  where: RestaurantWhereUniqueInput!
  data: RestaurantUpdateInput!
}

input RestaurantCreateInput {
  name: String
  slug: String
  menus: MenuRelateToManyForCreateInput
  image: Upload
}

input MenuRelateToManyForCreateInput {
  create: [MenuCreateInput!]
  connect: [MenuWhereUniqueInput!]
}

type Menu {
  id: ID!
  title: String
  slug: String
  description: String
  items(
    where: MenuItemWhereInput! = {}
    orderBy: [MenuItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MenuItem!]
  itemsCount(where: MenuItemWhereInput! = {}): Int
}

input MenuWhereUniqueInput {
  id: ID
  slug: String
}

input MenuWhereInput {
  AND: [MenuWhereInput!]
  OR: [MenuWhereInput!]
  NOT: [MenuWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  description: StringFilter
  items: MenuItemManyRelationFilter
}

input MenuItemManyRelationFilter {
  every: MenuItemWhereInput
  some: MenuItemWhereInput
  none: MenuItemWhereInput
}

input MenuOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  description: OrderDirection
}

input MenuUpdateInput {
  title: String
  slug: String
  description: String
  items: MenuItemRelateToManyForUpdateInput
}

input MenuItemRelateToManyForUpdateInput {
  disconnect: [MenuItemWhereUniqueInput!]
  set: [MenuItemWhereUniqueInput!]
  create: [MenuItemCreateInput!]
  connect: [MenuItemWhereUniqueInput!]
}

input MenuUpdateArgs {
  where: MenuWhereUniqueInput!
  data: MenuUpdateInput!
}

input MenuCreateInput {
  title: String
  slug: String
  description: String
  items: MenuItemRelateToManyForCreateInput
}

input MenuItemRelateToManyForCreateInput {
  create: [MenuItemCreateInput!]
  connect: [MenuItemWhereUniqueInput!]
}

type MenuItem {
  id: ID!
  name: String
  description: String
  price: Int
  image: CloudinaryImage_File
}

input MenuItemWhereUniqueInput {
  id: ID
}

input MenuItemWhereInput {
  AND: [MenuItemWhereInput!]
  OR: [MenuItemWhereInput!]
  NOT: [MenuItemWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  price: IntFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input MenuItemOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  price: OrderDirection
}

input MenuItemUpdateInput {
  name: String
  description: String
  price: Int
  image: Upload
}

input MenuItemUpdateArgs {
  where: MenuItemWhereUniqueInput!
  data: MenuItemUpdateInput!
}

input MenuItemCreateInput {
  name: String
  description: String
  price: Int
  image: Upload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createRestaurant(data: RestaurantCreateInput!): Restaurant
  createRestaurants(data: [RestaurantCreateInput!]!): [Restaurant]
  updateRestaurant(
    where: RestaurantWhereUniqueInput!
    data: RestaurantUpdateInput!
  ): Restaurant
  updateRestaurants(data: [RestaurantUpdateArgs!]!): [Restaurant]
  deleteRestaurant(where: RestaurantWhereUniqueInput!): Restaurant
  deleteRestaurants(where: [RestaurantWhereUniqueInput!]!): [Restaurant]
  createMenu(data: MenuCreateInput!): Menu
  createMenus(data: [MenuCreateInput!]!): [Menu]
  updateMenu(where: MenuWhereUniqueInput!, data: MenuUpdateInput!): Menu
  updateMenus(data: [MenuUpdateArgs!]!): [Menu]
  deleteMenu(where: MenuWhereUniqueInput!): Menu
  deleteMenus(where: [MenuWhereUniqueInput!]!): [Menu]
  createMenuItem(data: MenuItemCreateInput!): MenuItem
  createMenuItems(data: [MenuItemCreateInput!]!): [MenuItem]
  updateMenuItem(
    where: MenuItemWhereUniqueInput!
    data: MenuItemUpdateInput!
  ): MenuItem
  updateMenuItems(data: [MenuItemUpdateArgs!]!): [MenuItem]
  deleteMenuItem(where: MenuItemWhereUniqueInput!): MenuItem
  deleteMenuItems(where: [MenuItemWhereUniqueInput!]!): [MenuItem]
}

type Query {
  restaurants(
    where: RestaurantWhereInput! = {}
    orderBy: [RestaurantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Restaurant!]
  restaurant(where: RestaurantWhereUniqueInput!): Restaurant
  restaurantsCount(where: RestaurantWhereInput! = {}): Int
  menus(
    where: MenuWhereInput! = {}
    orderBy: [MenuOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Menu!]
  menu(where: MenuWhereUniqueInput!): Menu
  menusCount(where: MenuWhereInput! = {}): Int
  menuItems(
    where: MenuItemWhereInput! = {}
    orderBy: [MenuItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MenuItem!]
  menuItem(where: MenuItemWhereUniqueInput!): MenuItem
  menuItemsCount(where: MenuItemWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
